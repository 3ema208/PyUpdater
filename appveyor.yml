version: '{branch}-{build}'

shallow_clone: true

environment:

    PYU_AWS_ID:
        secure: ofIt2g7GRes1RPVXfM02/cH4uePSav+8qgZ74oGKraw=

    PYU_AWS_SECRET:
        secure: E8Lyi89ePr8Zk7HC5eTdSDYwUeQY2gow7g3A3+scRAgsAU0gm/A4DWaA/0IY2DJC

    matrix:
          - JOB: "2.7 32-bit"
            TOXENV: "py27"
            PYTHON: "C:\\Python27"
            PYTHON_VERSION: "2.7"
            PYTHON_ARCH: "32"

          - JOB: "3.3 32-bit"
            TOXENV: "py33"
            PYTHON: "C:\\Python33"
            PYTHON_VERSION: "3.3"
            PYTHON_ARCH: "32"

          - JOB: "3.4 32-bit"
            TOXENV: "py34"
            PYTHON: "C:\\Python34"
            PYTHON_VERSION: "3.4"
            PYTHON_ARCH: "32"

          - JOB: "3.5 32-bit"
            TOXENV: "py35"
            PYTHON: "C:\\Python35"
            PYTHON_VERSION: "3.5"
            PYTHON_ARCH: "32"

          - JOB: "3.5 64-bit"
            TOXENV: "py35"
            PYTHON: "C:\\Python35-x64"
            PYTHON_VERSION: "3.5"
            PYTHON_ARCH: "64"

          - JOB: "3.6 32-bit"
            TOXENV: "py36"
            PYTHON: "C:\\Python36"
            PYTHON_VERSION: "3.6"
            PYTHON_ARCH: "32"

          - JOB: "3.6 64-bit"
            TOXENV: "py36"
            PYTHON: "C:\\Python36-x64"
            PYTHON_VERSION: "3.6"
            PYTHON_ARCH: "64"


matrix:
    allow_failures:
        - PYTHON_VERSION: "3.6"


cache:
    # Cache created Python .whl packages to avoid compiling them again.
    # Wheels are built with --use-wheel to avoid recompiling already-built wheels.
    - C:\wheels

init:
    # Used to RDP into build worker
    # - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
    - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"
    - "ECHO \"%APPVEYOR_SCHEDULED_BUILD%\""

install:
    # - "ECHO Filesystem root:"
    # - ps: "ls \"C:/\""

    # - "ECHO Chocolatey tools:"
    # - ps: "ls \"C:/Tools\""

    # - "ECHO Installed SDKs:"
    # - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

    # Check that we have the expected version and architecture for Python
    - "build.cmd %PYTHON%\\python.exe --version"
    - "build.cmd %PYTHON%\\python.exe -c \"import struct; print(struct.calcsize('P') * 8)\""

    # Upgrade to the latest version of pip to avoid it displaying warnings
    # about it being out of date.
    - "build.cmd %PYTHON%\\python.exe -m pip install -U pip"

    # Create .whl packages from dependencies for possible caching.
    # First install 'wheel' package to be able create .whl files.
    - "build.cmd pip install wheel tox"

    # Create c:/wheels if it does not exist.
    - ps: If ( -not (Test-Path C:/wheels) )  { mkdir C:/wheels }

    # - ECHO "Cached wheels:"
    # - ps: "ls \"C:/wheels\""

    # Create .whl packages from dependencies for possible caching.
    # If some dependencies contain
    # compiled extensions and are not provided as pre-built wheel packages,
    # pip will build them from source using the MSVC compiler matching the
    # target Python version and architecture
    # If we have previously built a wheel and stored it in C:/wheels,
    # the --find-links option will find the previously built wheel and
    # skip rebuilding it. The wheel will still be rebuilt if a newer version is
    # available on PyPI.
    # TODO: remove out-of-date wheels to avoid overflowing the build cache
    - "build.cmd pip wheel --use-wheel --wheel-dir C:/wheels --find-links c:/wheels -r requirements.txt"
    - "build.cmd pip wheel --use-wheel --wheel-dir C:/wheels --find-links c:/wheels -r dev/requirements.txt"
#
build: none

on_finish:
  # Used to RDP into build worker
  # - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

test_script:
    # Split tests into several subprocesses.
    - "build.cmd tox"
